#include <Wire.h>
#include <LiquidCrystal_I2C.h>

//Максимально допустимое расстояние до поверхности
#define maxClearance 90

#define rotateSpeed 200

#define trigPin 4
#define echoPin 5
#define irPin 3

#define enaPin 11
#define int1Pin 10
#define int2Pin 9
#define int3Pin 8
#define int4Pin 7
#define enbPin 6
const int ledPin = 12;
String testB;
String command;

LiquidCrystal_I2C lcd(0x27,16,2);

long dist = 0.0;
boolean despair = false;

void setup(){
  pinMode(irPin,OUTPUT);
  pinMode(trigPin,OUTPUT);
  pinMode(echoPin,INPUT);
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);
}

void loop(){

  while (Serial.available()) {
    delay(3);  //delay to allow buffer to fill
    char c = Serial.read();
    testB="";
    testB += c;

    if(testB == "s"){
      command = "";
      while(testB != "p"){
        delay(3);
        char c = Serial.read();
        testB="";
        testB += c;
        //command+=testB;
        if(testB != "p"){
          command += testB;
        }
      }
    }
    String comm = command.substring(0,3);
    String par = command.substring(3,6);
    //Serial.println(comm+"_"+par);
    printLcd(comm+"_"+par);
    if(comm == "mvf"){
      moveForward(par.toInt());
    }else if(comm == "mvb"){
      moveBackward(par.toInt());
    }else if(comm == "mvl"){
      rotateLeft(par.toInt());
    }else if(comm == "mvr"){
      rotateRight(par.toInt());
    }else if(comm == "mvo"){
      enginesStop();
    }


  }




  //dist = getDistance();
  //Serial.println("Hi");


  //Serial.println("Hi");


  //delay(500);
  //lcd.clear();
  //lcd.setCursor(0,0);
  //lcd.print(dist);

  /*
  if(!despair){
    dist = getDistance();
    printLcd(String(dist));


    if(dist > 100){
      moveForward(240);
      printLcd(">100");
      delay(200);
    }
    if((dist > 20)&&(dist < 100)){
      moveForward(180);
      printLcd(">40 <100");
      delay(200);
    }

    if(dist <= 20){
      enginesStop();
      printLcd("<=20");
      delay(500);
      int trying = 0;
      while((dist<=20) && (trying < 20)){
        enginesStop();
        moveBackward(180);
        delay(500);
        enginesStop();
        delay(500);
        rotateLeft(500);
        enginesStop();
        delay(500);
        dist = getDistance();
        printLcd("try_"+String(trying)+" dst_"+String(dist));
        trying++;
      }
      if(trying>=20){
        despair = true;
        printLcd("despair");
      }else{
        moveForward(180);
      }
    }
  }*/

}

void light(int n){
  for (int i = 0; i < n; i++)  {
    digitalWrite(ledPin, HIGH);
    delay(100);
    digitalWrite(ledPin, LOW);
    delay(100);
  }
}

void printLcd(String s){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(s);
}

void enginesStop(){
  analogWrite(enaPin, 0);
  analogWrite(enbPin, 0);
}

void moveForward(int speed){
  digitalWrite(int1Pin, HIGH);
  digitalWrite(int2Pin, LOW);
  digitalWrite(int3Pin, HIGH);
  digitalWrite(int4Pin, LOW);
  analogWrite(enaPin, speed-40);
  analogWrite(enbPin, speed);
}

void moveBackward(int speed){
  digitalWrite(int1Pin, LOW);
  digitalWrite(int2Pin, HIGH);
  digitalWrite(int3Pin, LOW);
  digitalWrite(int4Pin, HIGH);
  analogWrite(enaPin, speed-40);
  analogWrite(enbPin, speed);
}

void rotateLeftA(int delayTime){
  digitalWrite(int1Pin, HIGH);
  digitalWrite(int2Pin, LOW);
  digitalWrite(int3Pin, LOW);
  digitalWrite(int4Pin, HIGH);
  analogWrite(enaPin, rotateSpeed);
  analogWrite(enbPin, rotateSpeed);
  delay(delayTime);
  enginesStop();
}

void rotateRightA(int delayTime){
  digitalWrite(int1Pin, LOW);
  digitalWrite(int2Pin, HIGH);
  digitalWrite(int3Pin, HIGH);
  digitalWrite(int4Pin, LOW);
  analogWrite(enaPin, rotateSpeed);
  analogWrite(enbPin, rotateSpeed);
  delay(delayTime);
  enginesStop();
}

void rotateLeft(int speed){
  digitalWrite(int1Pin, HIGH);
  digitalWrite(int2Pin, LOW);
  digitalWrite(int3Pin, LOW);
  digitalWrite(int4Pin, HIGH);
  analogWrite(enaPin, speed);
  analogWrite(enbPin, speed);
}

void rotateRight(int speed){
  digitalWrite(int1Pin, LOW);
  digitalWrite(int2Pin, HIGH);
  digitalWrite(int3Pin, HIGH);
  digitalWrite(int4Pin, LOW);
  analogWrite(enaPin, speed);
  analogWrite(enbPin, speed);
}



//Измерить расстояние с ультразвукового датчика
long getDistance(){
  digitalWrite(trigPin,LOW);
  delay(2);
  digitalWrite(trigPin,HIGH);
  delay(10);
  digitalWrite(trigPin,LOW);
  long distanceRaw = pulseIn(echoPin, HIGH);
  long cm = distanceRaw/29/2;
  return cm;
}

//Смотрим расстояние до поверхности
boolean gotEarth(){
  int testClearance = analogRead(irPin);
  boolean result;
  if (testClearance > maxClearance) {
    result = false;
  }else{
    result = true;
  }
 return result;
}